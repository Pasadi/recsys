import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Map.Entry;


public class bookSimilarity {
	 private List<Book> bookData=new ArrayList<>();
	    private List<String[]> termsDocsArray = new ArrayList<>();
	    private List allTerms = new ArrayList<>(); //to hold all terms

	/**
	 * @param args
	 */
	public List<Book> parseMapBook() throws FileNotFoundException, IOException {
        File f=new File("dbBookGenres.txt");
        FileReader fr=new FileReader(f);
        BufferedReader br=new BufferedReader(fr);
        String a;
        String[] arr={"","",""};
        String[] other={"","",""};
        File fd=new File("BooksToCompare.txt");
     //   File  writeFile=new File("dbBookGenres.txt");
        
		// if file doesnt exists, then create it
		 

//		FileWriter fw = new FileWriter(fd.getAbsoluteFile(),true);
//		BufferedWriter bw = new BufferedWriter(fw);
//        
        Map<String,String> books=new HashMap<>();
        while((a=br.readLine())!=null){
        	if(a.contains("****")){
        		other=a.split("[*]+");
        		arr[0]=other[0];
        		arr[2]=other[1];
        	}else{
        		
        		
        		arr=a.split("[*]+");
        	}
        //	System.out.println("````````````````````````"+arr[1]);
        	Set<String> duplicates=new HashSet<>();//remove duplicates
    String[] genreArray=arr[2].split("\\s+");
    		for(String element:genreArray){

    			duplicates.add(element);
    		}
    		String text="";	
    		Iterator itr=duplicates.iterator();
    			for(;itr.hasNext();)
    			text=text.concat(itr.next()+" ");  
    		//	System.out.println("Cleaned *****"+text);
    		//	System.out.println("===================>"+arr[0]+" "+text);
    	//		bw.write(arr[0]+" "+text);
    		//	bw.newLine();
    		String tokenizedTerms[]=	text.toString().split("\\s+");
       			//  books.put(arr[0], tokenizedTerms);
        	books.put(arr[0], text);
termsDocsArray.add(tokenizedTerms);
                  Book b=new Book();
                  b.setBookName(arr[0]);
                  b.setBook(arr[1]);
                  b.setBookTerms(tokenizedTerms);
                  bookData.add(b);
        }		
    		 return bookData;
        }
public void parseUserProfile(List<Movie> userProfile) throws FileNotFoundException, IOException {
        
    	for(Movie entry:userProfile){
                for (String term : entry.getMovieTerms()) {
                    if (!allTerms.contains(term)) {  //avoid duplicate entry
                        allTerms.add(term);
                        System.out.println("uniqueeeeeeee"+term);
                        }
                }
               // System.out.println("terms docs array"+Arrays.toString(entry.getMovieTerms()));
                termsDocsArray.add(entry.getMovieTerms());
            
     
        }
    	
    	tfIdfCalculatorUserProf(userProfile);
     
    }
    public void tfIdfCalculator(List<Book> books) {
     	  double tf; //term frequency
           double idf; //inverse document frequency
           double tfidf; //term requency inverse document frequency    
           for(Book m:books){
         	  String[] docTermsArray=m.getBookTerms();
         	  double[] tfidfvectors = new double[allTerms.size()];
               int count = 0;
               Iterator<String> itr=allTerms.iterator();
               while(itr.hasNext()){
             	  String terms=itr.next();
             	   
             	  tf = new TfIdf().tfCalculator(docTermsArray, terms); //doctermsarray of each book against allterms in movie profile
                   idf = new TfIdf().idfCalculator(termsDocsArray, terms);//terms docs arrays of all the books
                   tfidf = tf * idf;
                 
                   tfidfvectors[count] = tfidf;
                   count++;
               }
               m.setTfVector(tfidfvectors);
           // System.out.println(Arrays.toString(m.getTfVector()));
           }
     	 
      }
    public void tfIdfCalculatorUserProf(List<Movie> books) {
   	  double tf; //term frequency
         double idf; //inverse document frequency
         double tfidf; //term requency inverse document frequency    
         for(Movie m:books){
       	  String[] docTermsArray=m.getMovieTerms();
       	  double[] tfidfvectors = new double[allTerms.size()];
             int count = 0;
             Iterator<String> itr=allTerms.iterator();
             while(itr.hasNext()){
           	  String terms=itr.next();
           	   
           	  tf = new TfIdf().tfCalculator(docTermsArray, terms); //doctermsarray of each book against allterms in movie profile
                 idf = new TfIdf().idfCalculator(termsDocsArray, terms);//terms docs arrays of all the books
                 tfidf = tf * idf;
               
                 tfidfvectors[count] = tfidf;
                 count++;
             }
             m.setTfVector(tfidfvectors);
         }
   	 
    }
    public void getCosineSimilarityMy(List<Book> BookData,List<Movie> userProfile) {
    	List<Book> similarBooks=new ArrayList<>();
    	double overallSimilarity=0.0;
    	int count=0;
    	for(Movie m:userProfile){
    		count=0;
    		List<Book> compatibleBooks=new ArrayList<>();
        	for(Book j: BookData){
        		j.setSimilarity(0.0);
        		overallSimilarity=0.0;
    			count++;		
                	overallSimilarity+=new CosineSimilarity().cosineSimilarity(m.getTfVector(),j.getTfVector());
                	if(Double.isNaN(overallSimilarity))
                		overallSimilarity=0.0;
                	
                	if(overallSimilarity>0.0){
                		j.setSimilarity(overallSimilarity);
                		compatibleBooks.add(j);
                	}
        	}
        	similarBooks.addAll(createSimilarBooks(compatibleBooks));	
    	}
    	for(Book b:similarBooks){
    		System.out.println("==========*****"+b.book+Arrays.toString(b.bookTerms));
    	}
    }
   	 public static List<Book> getSimilarBooks(List<Book> myList){
		    Collections.sort(myList, new OverallSimilarity1());
//		    	for(Book b:myList)
//		    	 System.out.println(b.getBookName()+"Similarity is: "+b.getSimilarity());
		    	return myList.subList(0, 50);
 }
			public static List<Book> createSimilarBooks(List<Book> myList){
				 
				 return getSimilarBooks(myList);
				}
    	
}
     
  

